@:jsRequire("react-hook-form") @valueModuleOnly extern class React_hook_form {
	static function useForm<FormValues, ValidationContext>(?__0:{ @:optional var mode : String; @:optional var reValidateMode : String; @:optional var defaultValues : react_hook_form.DeepPartial<FormValues>; @:optional var validationSchema : Dynamic; @:optional var validationResolver : react_hook_form.ValidationResolver<FormValues, ValidationContext>; @:optional var validationContext : ValidationContext; @:optional var submitFocusError : Bool; @:optional var validateCriteriaMode : String; }):react_hook_form.FormContextValues<FormValues>;
	static var useFieldArray : (__0:react_hook_form.UseFieldArrayProps<Any, Any>) -> { var swap : (indexA:Float, indexB:Float) -> Void; var move : (from:Float, to:Float) -> Void; var prepend : (value:ts.AnyOf2<{ }, Array<{ }>>) -> Void; var append : (value:ts.AnyOf2<{ }, Array<{ }>>) -> Void; var remove : ts.AnyOf2<() -> Void, (index:ts.AnyOf2<Float, Array<Float>>) -> Void>; var insert : (index:Float, value:ts.AnyOf2<{ }, Array<{ }>>) -> Void; var fields : Array<{ }>; };
	static var Controller : (__0:react_hook_form.Assign<{ var name : String; var as : Any; @:optional var rules : { @:optional var required : ts.AnyOf4<String, Bool, react_hook_form.react.ReactElement<Dynamic, ts.AnyOf3<String, (props:Dynamic) -> Null<react_hook_form.react.ReactElement<Dynamic, Dynamic>>, { }>>, react_hook_form.ValidationValueMessage<Bool>>; @:optional var min : ts.AnyOf3<String, Float, react_hook_form.ValidationValueMessage<ts.AnyOf2<String, Float>>>; @:optional var max : ts.AnyOf3<String, Float, react_hook_form.ValidationValueMessage<ts.AnyOf2<String, Float>>>; @:optional var maxLength : ts.AnyOf3<String, Float, react_hook_form.ValidationValueMessage<ts.AnyOf2<String, Float>>>; @:optional var minLength : ts.AnyOf3<String, Float, react_hook_form.ValidationValueMessage<ts.AnyOf2<String, Float>>>; @:optional var pattern : ts.AnyOf2<ts.lib.RegExp, react_hook_form.ValidationValueMessage<ts.lib.RegExp>>; @:optional var validate : ts.AnyOf2<react_hook_form.Validate, ts.lib.Record<String, react_hook_form.Validate>>; }; @:optional var onChange : react_hook_form.EventFunction; @:optional var onFocus : () -> Void; @:optional var onBlur : react_hook_form.EventFunction; @:optional var mode : String; @:optional var onChangeName : String; @:optional var onBlurName : String; @:optional var valueName : String; @:optional var defaultValue : Any; @:optional var control : Any; }, react_hook_form.AsProps<Any>>) -> react_hook_form.react.ReactElement<Dynamic, ts.AnyOf3<String, (props:Dynamic) -> Null<react_hook_form.react.ReactElement<Dynamic, Dynamic>>, { }>>;
	static var ErrorMessage : (__0:react_hook_form.Assign<{ @:optional var as : Any; @:optional var errors : Any; var name : Any; @:optional var message : ts.AnyOf2<String, react_hook_form.react.ReactElement<Dynamic, ts.AnyOf3<String, (props:Dynamic) -> Null<react_hook_form.react.ReactElement<Dynamic, Dynamic>>, { }>>>; @:optional var children : (data:{ var message : react_hook_form.Message; @:optional var messages : { }; }) -> react_hook_form.react.ReactNode; }, react_hook_form.AsProps<Any>>) -> Null<react_hook_form.jsx.Element>;
	static function useFormContext<T>():react_hook_form.FormContextValues<T>;
	static function FormContext<T>(__0:react_hook_form.FormProps<T>):react_hook_form.jsx.Element;
}