"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const events_1 = require("events");
const node_fetch_1 = __importStar(require("node-fetch"));
const p_retry_1 = __importDefault(require("p-retry"));
const DEFAULT_RETRYING_OPTIONS = {
    factor: 2,
    maxTimeout: Number.POSITIVE_INFINITY,
    minTimeout: 1000,
    retries: 2,
    retryOnStatusCodes: [408, 500, 502, 503, 504],
};
const NON_RETRYING_OPTIONS = Object.assign({}, DEFAULT_RETRYING_OPTIONS, {
    retries: 0,
});
function extractMethod(url, init) {
    if (url instanceof node_fetch_1.Request) {
        return url.method.toUpperCase();
    }
    else if (init && init.method) {
        return init.method.toUpperCase();
    }
    else {
        return 'GET';
    }
}
function calculateDuration(startTime) {
    const [seconds, nanoseconds] = process.hrtime(startTime);
    return seconds * 1000 + nanoseconds / 1000000;
}
class NodeFetchPlus extends events_1.EventEmitter {
    constructor(opts = {}) {
        super();
        if (!opts.retry) {
            this.retryOptions = NON_RETRYING_OPTIONS;
        }
        else {
            this.retryOptions = Object.assign({}, DEFAULT_RETRYING_OPTIONS, opts.retry);
        }
        /**
         * If an EventEmitter emits an 'error' event with no bound listeners it will
         * quit the node process. As these events are optional for our users we dont
         * want this behaviour. So when we create a client we bind a no-op to the
         * error event to prevent this.
         */
        this.on('error', () => { }); // tslint:disable-line no-empty
    }
    fetch(url, init) {
        const eventParams = {
            maxAttempts: this.retryOptions.retries + 1,
            method: extractMethod(url, init),
            url: url instanceof node_fetch_1.Request ? url.url : url,
        };
        return p_retry_1.default((attempt) => __awaiter(this, void 0, void 0, function* () {
            const startTime = process.hrtime();
            this.emit('request', Object.assign({ attempt }, eventParams));
            let res;
            try {
                res = yield node_fetch_1.default(url, init);
            }
            catch (err) {
                this.emit('error', Object.assign({ attempt, message: err.message, responseTime: calculateDuration(startTime) }, eventParams));
                throw err;
            }
            this.emit('response', Object.assign({ attempt, responseTime: calculateDuration(startTime), statusCode: res.status }, eventParams));
            if (this.shouldRetry(attempt, res.status)) {
                throw new Error(`Received ${res.status}, retrying`);
            }
            return res;
        }), this.retryOptions);
    }
    shouldRetry(attempt, status) {
        return attempt <= this.retryOptions.retries && this.retryOptions.retryOnStatusCodes.includes(status);
    }
}
module.exports = NodeFetchPlus;
