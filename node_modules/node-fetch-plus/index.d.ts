/// <reference types="node" />
import { EventEmitter } from 'events';
import { Request, RequestInit, Response } from 'node-fetch';
interface Options {
    retry?: PartialRetryOptions | false;
}
interface RetryOptions {
    retries: number;
    factor: number;
    minTimeout: number;
    maxTimeout: number;
    retryOnStatusCodes: number[];
}
declare type PartialRetryOptions = Partial<RetryOptions>;
interface BaseEvent {
    attempt: number;
    maxAttempts: number;
    method: string;
    url: string;
}
interface ErrorEvent extends BaseEvent {
    message: string;
    responseTime: number;
}
interface ResponseEvent extends BaseEvent {
    responseTime: number;
    statusCode: number;
}
declare interface NodeFetchPlus {
    on(event: 'error', listener: (value: ErrorEvent) => void): this;
    on(event: 'request', listener: (value: BaseEvent) => void): this;
    on(event: 'response', listener: (value: ResponseEvent) => void): this;
}
declare class NodeFetchPlus extends EventEmitter {
    private retryOptions;
    constructor(opts?: Options);
    fetch(url: string | Request, init?: RequestInit): Promise<Response>;
    private shouldRetry;
}
export = NodeFetchPlus;
